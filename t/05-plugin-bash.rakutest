use Test;
use lib '.';
use Samaki::Plugin::Bash;

plan 8;

# Mock cell class for testing
class MockCell is Samaki::Cell {
    has $.content = 'echo "hello world"';
    has $.timeout = 2;
    method get-content(:$mode) { $.content }
    method get-conf($key) { $key eq 'timeout' ?? $.timeout !! Nil }
}

# Test basic instantiation
my $bash;
lives-ok { 
    $bash = Samaki::Plugin::Bash.new;
}, 'can create Bash plugin instance';

# Test attributes
is $bash.name, 'bash', 'name is set correctly';
is $bash.description, 'Run bash with streaming output', 'description is set correctly';
ok $bash.stream-output, 'stream-output is enabled';

# Test role composition
ok $bash ~~ Samaki::Plugin::Process, 'does Samaki::Plugin::Process role';

# Test execute method with simple command
{
    my $cell = MockCell.new(page-name => 'test', cell-type => 'test', name => 'test', data-dir => $*TMPDIR, wkdir => $*TMPDIR);
    lives-ok { 
        $bash.execute(:$cell, :mode<eval>);
    }, 'execute method runs without dying';
}

# Test timeout functionality
{
    my $cell = MockCell.new(content => 'sleep 5', timeout => 1, page-name => 'test', cell-type => 'test', name => 'test', data-dir => $*TMPDIR, wkdir => $*TMPDIR);
    my $start-time = now;
    lives-ok { 
        $bash.execute(:$cell, :mode<eval>);
    }, 'execute with timeout runs without dying';
    my $elapsed = now - $start-time;
    ok $elapsed < 3, 'command was terminated before completion due to timeout';
}

done-testing;
